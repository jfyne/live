{
  "version": 3,
  "sources": ["../src/element.ts", "../src/event.ts", "../src/forms.ts", "../src/patch.ts", "../src/params.ts", "../src/events.ts", "../src/socket.ts", "../src/live.ts", "../src/auto.ts"],
  "sourcesContent": ["/**\n * Element helper class.\n */\nexport class LiveElement {\n    static hook(element: HTMLElement): string | null {\n        if (element.getAttribute === undefined) {\n            return null;\n        }\n        return element.getAttribute(\"live-hook\");\n    }\n}\n", "import { Socket } from \"./socket\";\nimport { LiveElement } from \"./element\";\nimport { Hook, Hooks, DOM } from \"./interop\";\n\nexport const EventMounted = \"live:mounted\";\nexport const EventBeforeUpdate = \"live:beforeupdate\";\nexport const EventUpdated = \"live:updated\";\nexport const EventBeforeDestroy = \"live:beforedestroy\";\nexport const EventDestroyed = \"live:destroyed\";\nexport const EventDisconnected = \"live:disconnected\";\nexport const EventReconnected = \"live:reconnected\";\n\nexport const ClassConnected = \"live-connected\";\nexport const ClassDisconnected = \"live-disconnected\";\nexport const ClassError = \"live-error\";\n\n/**\n * LiveEvent an event that is being passed back and forth\n * between the frontend and server.\n */\nexport class LiveEvent {\n    public typ: string;\n    public id: number;\n    public data: any;\n    private static sequence: number = 1;\n\n    constructor(typ: string, data: any, id?: number) {\n        this.typ = typ;\n        this.data = data;\n        if (id !== undefined) {\n            this.id = id;\n        } else {\n            this.id = 0;\n        }\n    }\n\n    /**\n     * Get an ID for an event.\n     */\n    public static GetID(): number {\n        return this.sequence++;\n    }\n\n    /**\n     * Convert the event onto our wire format\n     */\n    public serialize(): string {\n        return JSON.stringify({\n            t: this.typ,\n            i: this.id,\n            d: this.data,\n        });\n    }\n\n    /**\n     * From an incoming message create a live event.\n     */\n    public static fromMessage(data: any): LiveEvent {\n        const e = JSON.parse(data);\n        return new LiveEvent(e.t, e.d, e.i);\n    }\n}\n\n/**\n * EventDispatch allows the code base to send events\n * to hooked elements. Also handles events coming from\n * the server.\n */\nexport class EventDispatch {\n    private static hooks: Hooks;\n    private static dom?: DOM;\n    private static eventHandlers: { [e: string]: ((d: any) => void)[] };\n\n    constructor() {}\n\n    /**\n     * Must be called before usage.\n     */\n    static init(hooks: Hooks, dom?: DOM) {\n        this.hooks = hooks;\n        this.dom = dom;\n        this.eventHandlers = {};\n    }\n\n    /**\n     * Handle an event pushed from the server.\n     */\n    static handleEvent(ev: LiveEvent) {\n        if (!(ev.typ in this.eventHandlers)) {\n            return;\n        }\n        this.eventHandlers[ev.typ].map((h) => {\n            h(ev.data);\n        });\n    }\n\n    /**\n     * Handle an element being mounted.\n     */\n    static mounted(element: Element) {\n        const event = new CustomEvent(EventMounted, {});\n        const h = this.getElementHooks(element);\n        if (h === null) {\n            return;\n        }\n        this.callHook(event, element, h.mounted);\n    }\n\n    /**\n     * Before an element is updated.\n     */\n    static beforeUpdate(fromEl: Element, toEl: Element) {\n        const event = new CustomEvent(EventBeforeUpdate, {});\n\n        const h = this.getElementHooks(fromEl);\n        if (h !== null) {\n            this.callHook(event, fromEl, h.beforeUpdate);\n        }\n\n        if (\n            this.dom !== undefined &&\n            this.dom.onBeforeElUpdated !== undefined\n        ) {\n            this.dom.onBeforeElUpdated(fromEl, toEl);\n        }\n    }\n\n    /**\n     * After and element has been updated.\n     */\n    static updated(element: Element) {\n        const event = new CustomEvent(EventUpdated, {});\n        const h = this.getElementHooks(element);\n        if (h === null) {\n            return;\n        }\n        this.callHook(event, element, h.updated);\n    }\n\n    /**\n     * Before an element is destroyed.\n     */\n    static beforeDestroy(element: Element) {\n        const event = new CustomEvent(EventBeforeDestroy, {});\n        const h = this.getElementHooks(element);\n        if (h === null) {\n            return;\n        }\n        this.callHook(event, element, h.beforeDestroy);\n    }\n\n    /**\n     * After an element has been destroyed.\n     */\n    static destroyed(element: Element) {\n        const event = new CustomEvent(EventDestroyed, {});\n        const h = this.getElementHooks(element);\n        if (h === null) {\n            return;\n        }\n        this.callHook(event, element, h.destroyed);\n    }\n\n    /**\n     * Handle a disconnection event.\n     */\n    static disconnected() {\n        const event = new CustomEvent(EventDisconnected, {});\n        document.querySelectorAll(`[live-hook]`).forEach((element: Element) => {\n            const h = this.getElementHooks(element);\n            if (h === null) {\n                return;\n            }\n            this.callHook(event, element, h.disconnected);\n        });\n        document.body.classList.add(ClassDisconnected);\n        document.body.classList.remove(ClassConnected);\n    }\n\n    /**\n     * Handle a reconnection event.\n     */\n    static reconnected() {\n        const event = new CustomEvent(EventReconnected, {});\n        document.querySelectorAll(`[live-hook]`).forEach((element: Element) => {\n            const h = this.getElementHooks(element);\n            if (h === null) {\n                return;\n            }\n            this.callHook(event, element, h.reconnected);\n        });\n        document.body.classList.remove(ClassDisconnected);\n        document.body.classList.add(ClassConnected);\n    }\n\n    /**\n     * Handle an error event.\n     */\n    static error() {\n        document.body.classList.add(ClassError);\n    }\n\n    private static getElementHooks(element: Element): Hook | null {\n        const val = LiveElement.hook(element as HTMLElement);\n        if (val === null) {\n            return val;\n        }\n        return this.hooks[val];\n    }\n\n    private static callHook(\n        event: CustomEvent,\n        el: Element,\n        f: (() => void) | undefined\n    ) {\n        if (f === undefined) {\n            return;\n        }\n        const pushEvent = (e: LiveEvent) => {\n            Socket.send(e);\n        };\n        const handleEvent = (e: string, cb: (d: any) => void) => {\n            if (!(e in this.eventHandlers)) {\n                this.eventHandlers[e] = [];\n            }\n            this.eventHandlers[e].push(cb);\n        };\n        f.bind({ el, pushEvent, handleEvent })();\n        el.dispatchEvent(event);\n    }\n}\n", "/**\n * A value of an existing input in a form.\n */\ninterface inputState {\n    name: string;\n    focus: boolean;\n    value: any;\n}\n\n/**\n * A value of a file input for validation.\n */\ninterface fileInput {\n    name: string;\n    lastModified: number;\n    size: number;\n    type: string;\n}\n\n/**\n * Form helper class.\n */\nexport class Forms {\n    private static upKey = \"uploads\";\n\n    private static formState: { [id: string]: inputState[] } = {};\n\n    /**\n     * When we are patching the DOM we need to save the state\n     * of any forms so that we don't lose input values or\n     * focus\n     */\n    static dehydrate() {\n        const forms = document.querySelectorAll(\"form\");\n        forms.forEach((f) => {\n            if (f.id === \"\") {\n                console.error(\n                    \"form does not have an ID. DOM updates may be affected\",\n                    f\n                );\n                return;\n            }\n\n            this.formState[f.id] = [];\n            new FormData(f).forEach((value: any, name: string) => {\n                const i = {\n                    name: name,\n                    value: value,\n                    focus:\n                        f.querySelector(`[name=\"${name}\"]`) ==\n                        document.activeElement,\n                };\n                this.formState[f.id].push(i);\n            });\n        });\n    }\n\n    /**\n     * This sets the form backup to its original state.\n     */\n    static hydrate() {\n        Object.keys(this.formState).map((formID) => {\n            const form = document.querySelector(`#${formID}`);\n            if (form === null) {\n                delete this.formState[formID];\n                return;\n            }\n\n            const state = this.formState[formID];\n            state.map((i) => {\n                const input = form.querySelector(\n                    `[name=\"${i.name}\"]`\n                ) as HTMLInputElement;\n                if (input === null) {\n                    return;\n                }\n                switch (input.type) {\n                    case \"file\":\n                        break;\n                    case \"checkbox\":\n                        if (i.value === \"on\") {\n                            input.checked = true;\n                        }\n                        break;\n                    default:\n                        input.value = i.value;\n                        if (i.focus === true) {\n                            input.focus();\n                        }\n                        break;\n                }\n            });\n        });\n    }\n\n    /**\n     * serialize form to values.\n     */\n    static serialize(form: HTMLFormElement): { [key: string]: string | number | fileInput } {\n        const values: { [key: string]: any } = {};\n        const formData = new FormData(form);\n        formData.forEach((value, key) => {\n            switch (true) {\n                case value instanceof File:\n                    const file = value as File;\n                    const fi = {\n                        name: file.name,\n                        type: file.type,\n                        size: file.size,\n                        lastModified: file.lastModified,\n                    }\n                    if (!Reflect.has(values, this.upKey)) {\n                        values[this.upKey] = {};\n                    }\n                    if (!Reflect.has(values[this.upKey], key)) {\n                        values[this.upKey][key] = [];\n                    }\n                    values[this.upKey][key].push(fi);\n                    break;\n                default:\n                    // If the key doesn't exist set it.\n                    if (!Reflect.has(values, key)) {\n                        values[key] = value;\n                        return;\n                    }\n                    // If it already exists that means this needs to become\n                    // an array.\n                    if (!Array.isArray(values[key])) {\n                        values[key] = [values[key]];\n                    }\n                    // Push the new value onto the array.\n                    values[key].push(value);\n            }\n        });\n        return values;\n    }\n\n    /**\n     * does a form have files.\n     */\n    static hasFiles(form: HTMLFormElement): boolean {\n        const formData = new FormData(form);\n        let hasFiles = false;\n        formData.forEach((value) => {\n            if(value instanceof File) {\n                hasFiles = true;\n            }\n        });\n        return hasFiles;\n    }\n}\n", "import { LiveEvent, EventDispatch } from \"./event\";\nimport { Forms } from \"./forms\";\n\ninterface PatchEvent {\n    Anchor: string;\n    Action: number;\n    HTML: string;\n}\n\n/**\n * Handle patches from the backend.\n */\nexport class Patch {\n    static handle(event: LiveEvent) {\n        Forms.dehydrate();\n\n        const patches = event.data;\n        patches.map(Patch.applyPatch);\n\n        Forms.hydrate();\n    }\n\n    private static applyPatch(e: PatchEvent) {\n        const target = document.querySelector(`*[${e.Anchor}]`);\n        if (target === null) {\n            return;\n        }\n\n        const newElement = Patch.html2Node(e.HTML);\n        switch (e.Action) {\n            case 0: // NOOP\n                return;\n            case 1: // REPLACE\n                if (e.HTML === \"\") {\n                    EventDispatch.beforeDestroy(target);\n                } else {\n                    EventDispatch.beforeUpdate(target, newElement as Element);\n                }\n                target.outerHTML = e.HTML;\n                if (e.HTML === \"\") {\n                    EventDispatch.destroyed(target);\n                } else {\n                    EventDispatch.updated(target);\n                }\n                break;\n            case 2: // APPEND\n                EventDispatch.beforeUpdate(target, newElement as Element);\n                target.append(newElement);\n                EventDispatch.updated(target);\n                break;\n            case 3: // PREPEND\n                EventDispatch.beforeUpdate(target, newElement as Element);\n                target.prepend(newElement);\n                EventDispatch.updated(target);\n                break;\n        }\n    }\n\n    private static html2Node(html: string): Node {\n        const template = document.createElement(\"template\");\n        html = html.trim();\n        template.innerHTML = html;\n        if (template.content.firstChild === null) {\n            return document.createTextNode(html);\n        }\n        return template.content.firstChild;\n    }\n}\n", "import { Socket } from \"./socket\";\nimport { LiveEvent } from \"./event\";\n\n/**\n * A values from the \"live-value-\" attributes. As\n * well as values from the query string in the URL.\n */\nexport interface Params {\n    [key: string]: any;\n}\n\n/**\n * GetParams gets the current parameters for an event. This includes\n * any from an element passed in and the URL search string.\n */\nexport function GetParams(element?: HTMLElement): Params {\n    const output: Params = {};\n\n    const urlParams = new URLSearchParams(window.location.search);\n    urlParams.forEach((value, key) => {\n        output[key] = value;\n    });\n\n    if (element === undefined) {\n        return output;\n    }\n\n    if (!element.hasAttributes()) {\n        return output;\n    }\n    const attrs = element.attributes;\n    for (let i = 0; i < attrs.length; i++) {\n        if (!attrs[i].name.startsWith(\"live-value-\")) {\n            continue;\n        }\n        output[attrs[i].name.split(\"live-value-\")[1]] = attrs[i].value;\n    }\n    return output;\n}\n\n/**\n * GetURLParams get the params from a url path.\n */\nexport function GetURLParams(path: string): Params {\n    const url = new URL(path, location.origin);\n    const urlParams = new URLSearchParams(url.search);\n\n    const output: Params = {};\n    urlParams.forEach((value, key) => {\n        output[key] = value;\n    });\n\n    return output;\n}\n\n/**\n * UpdateURLParams update the URL using the push state api, then\n * notify the backend.\n */\nexport function UpdateURLParams(path: string, element?: HTMLElement) {\n    window.history.pushState({}, \"\", path);\n    if (element === undefined) {\n        Socket.send(new LiveEvent(\"params\", { ...GetURLParams(path) }));\n    } else {\n        const params = GetParams(element);\n        Socket.sendAndTrack(\n            new LiveEvent(\n                \"params\",\n                { ...params, ...GetURLParams(path) },\n                LiveEvent.GetID()\n            ),\n            element\n        );\n    }\n}\n", "import { Socket } from \"./socket\";\nimport { Forms } from \"./forms\";\nimport { UpdateURLParams, GetParams, GetURLParams, Params } from \"./params\";\nimport { EventDispatch, LiveEvent } from \"./event\";\n\n/**\n * Standard event handler class. Clicks, focus and blur.\n */\nclass LiveHandler {\n    protected limiter = new Limiter();\n\n    constructor(protected event: string, protected attribute: string) {}\n\n    public isWired(element: Element): boolean {\n        if (element.hasAttribute(`${this.attribute}-wired`)) {\n            return true;\n        }\n        element.setAttribute(`${this.attribute}-wired`, \"\");\n        return false;\n    }\n\n    public attach() {\n        document\n            .querySelectorAll(`*[${this.attribute}]`)\n            .forEach((element: Element) => {\n                if (this.isWired(element) == true) {\n                    return;\n                }\n                const params = GetParams(element as HTMLElement);\n                element.addEventListener(this.event, (e) => {\n                    if (this.limiter.hasDebounce(element)) {\n                        this.limiter.debounce(\n                            element,\n                            e,\n                            this.handler(element as HTMLFormElement, params)\n                        );\n                    } else {\n                        this.handler(element as HTMLFormElement, params)(e);\n                    }\n                });\n                element.addEventListener(\"ack\", (_) => {\n                    element.classList.remove(`${this.attribute}-loading`);\n                });\n            });\n    }\n\n    protected windowAttach() {\n        document\n            .querySelectorAll(`*[${this.attribute}]`)\n            .forEach((element: Element) => {\n                if (this.isWired(element) === true) {\n                    return;\n                }\n                const params = GetParams(element as HTMLElement);\n                window.addEventListener(\n                    this.event,\n                    this.handler(element as HTMLElement, params)\n                );\n                window.addEventListener(\"ack\", (_) => {\n                    element.classList.remove(`${this.attribute}-loading`);\n                });\n            });\n    }\n\n    protected handler(element: HTMLElement, params: Params): EventListener {\n        return (_: Event) => {\n            const t = element?.getAttribute(this.attribute);\n            if (t === null) {\n                return;\n            }\n            element.classList.add(`${this.attribute}-loading`);\n            Socket.sendAndTrack(\n                new LiveEvent(t, params, LiveEvent.GetID()),\n                element\n            );\n        };\n    }\n}\n\n/**\n * KeyHandler handle key events.\n */\nexport class KeyHandler extends LiveHandler {\n    protected handler(element: HTMLElement, params: Params): EventListener {\n        return (ev: Event) => {\n            const ke = ev as KeyboardEvent;\n            const t = element?.getAttribute(this.attribute);\n            if (t === null) {\n                return;\n            }\n            const filter = element.getAttribute(\"live-key\");\n            if (filter !== null) {\n                if (ke.key !== filter) {\n                    return;\n                }\n            }\n            element.classList.add(`${this.attribute}-loading`);\n            const keyData = {\n                key: ke.key,\n                altKey: ke.altKey,\n                ctrlKey: ke.ctrlKey,\n                shiftKey: ke.shiftKey,\n                metaKey: ke.metaKey,\n            };\n            Socket.sendAndTrack(\n                new LiveEvent(t, { ...params, ...keyData }, LiveEvent.GetID()),\n                element\n            );\n        };\n    }\n}\n\nclass Limiter {\n    private debounceAttr = \"live-debounce\";\n    private debounceEvent: any;\n\n    public hasDebounce(element: Element): boolean {\n        return element.hasAttribute(this.debounceAttr);\n    }\n\n    public debounce(element: Element, e: Event, fn: EventListener) {\n        clearTimeout(this.debounceEvent);\n        if (!this.hasDebounce(element)) {\n            fn(e);\n            return;\n        }\n        const debounce = element.getAttribute(this.debounceAttr);\n        if (debounce === null) {\n            fn(e);\n            return;\n        }\n        if (debounce === \"blur\") {\n            this.debounceEvent = fn;\n            element.addEventListener(\"blur\", () => {\n                this.debounceEvent();\n            });\n            return;\n        }\n        this.debounceEvent = setTimeout(() => {\n            fn(e);\n        }, parseInt(debounce));\n    }\n}\n\n/**\n * live-click attribute handling.\n */\nclass Click extends LiveHandler {\n    constructor() {\n        super(\"click\", \"live-click\");\n    }\n}\n\n/**\n * live-contextmenu attribute handling.\n */\nclass Contextmenu extends LiveHandler {\n    constructor() {\n        super(\"contextmenu\", \"live-contextmenu\");\n    }\n}\n\n/**\n * live-mousedown attribute handling.\n */\nclass Mousedown extends LiveHandler {\n    constructor() {\n        super(\"mousedown\", \"live-mousedown\");\n    }\n}\n\n/**\n * live-mouseup attribute handling.\n */\nclass Mouseup extends LiveHandler {\n    constructor() {\n        super(\"mouseup\", \"live-mouseup\");\n    }\n}\n\n/**\n * live-focus event handling.\n */\nclass Focus extends LiveHandler {\n    constructor() {\n        super(\"focus\", \"live-focus\");\n    }\n}\n\n/**\n * live-blur event handling.\n */\nclass Blur extends LiveHandler {\n    constructor() {\n        super(\"blur\", \"live-blur\");\n    }\n}\n\n/**\n * live-window-focus event handler.\n */\nclass WindowFocus extends LiveHandler {\n    constructor() {\n        super(\"focus\", \"live-window-focus\");\n    }\n\n    public attach() {\n        this.windowAttach();\n    }\n}\n\n/**\n * live-window-blur event handler.\n */\nclass WindowBlur extends LiveHandler {\n    constructor() {\n        super(\"blur\", \"live-window-blur\");\n    }\n\n    public attach() {\n        this.windowAttach();\n    }\n}\n\n/**\n * live-keydown event handler.\n */\nclass Keydown extends KeyHandler {\n    constructor() {\n        super(\"keydown\", \"live-keydown\");\n    }\n}\n\n/**\n * live-keyup event handler.\n */\nclass Keyup extends KeyHandler {\n    constructor() {\n        super(\"keyup\", \"live-keyup\");\n    }\n}\n\n/**\n * live-window-keydown event handler.\n */\nclass WindowKeydown extends KeyHandler {\n    constructor() {\n        super(\"keydown\", \"live-window-keydown\");\n    }\n\n    public attach() {\n        this.windowAttach();\n    }\n}\n\n/**\n * live-window-keyup event handler.\n */\nclass WindowKeyup extends KeyHandler {\n    constructor() {\n        super(\"keyup\", \"live-window-keyup\");\n    }\n\n    public attach() {\n        this.windowAttach();\n    }\n}\n\n/**\n * live-change form handler.\n */\nclass Change {\n    protected attribute = \"live-change\";\n    protected limiter = new Limiter();\n\n    constructor() {}\n\n    public isWired(element: Element): boolean {\n        if (element.hasAttribute(`${this.attribute}-wired`)) {\n            return true;\n        }\n        element.setAttribute(`${this.attribute}-wired`, \"\");\n        return false;\n    }\n    \n    public attach() {\n        let forms: Element[] = [];\n        document\n            .querySelectorAll(`form[${this.attribute}]`)\n            .forEach((element: Element) => {\n                element.addEventListener(\"ack\", (_) => {\n                    element.classList.remove(`${this.attribute}-loading`);\n                });\n                forms.push(element);\n                element\n                    .querySelectorAll(`input,select,textarea`)\n                    .forEach((childElement: Element) => {\n                        this.addEvent(element, childElement);\n                    });\n            });\n        forms.forEach((element: Element) => {\n            document\n                .querySelectorAll(`[form=${element.getAttribute(\"id\")}]`)\n                .forEach((childElement) => {\n                    this.addEvent(element, childElement);\n                });\n        });\n    };\n\n    private addEvent(element: Element, childElement: Element) {\n        if (this.isWired(childElement)) {\n            return;\n        }\n        childElement.addEventListener(\"input\", (e) => {\n            if (this.limiter.hasDebounce(childElement)) {\n                this.limiter.debounce(childElement, e, () => {\n                    this.handler(element as HTMLFormElement);\n                });\n            } else {\n                this.handler(element as HTMLFormElement);\n            }\n        });\n    }\n\n    private handler(element: HTMLFormElement) {\n        const t = element?.getAttribute(this.attribute);\n        if (t === null) {\n            return;\n        }\n        const values: { [key: string]: any } = Forms.serialize(element);\n        element.classList.add(`${this.attribute}-loading`);\n        Socket.sendAndTrack(\n            new LiveEvent(t, values, LiveEvent.GetID()),\n            element\n        );\n    }\n}\n\n/**\n * live-submit form handler.\n */\nclass Submit extends LiveHandler {\n    constructor() {\n        super(\"submit\", \"live-submit\");\n    }\n\n    protected handler(element: HTMLElement, params: Params): EventListener {\n        return (e: Event) => {\n            if (e.preventDefault) e.preventDefault();\n\n            const hasFiles = Forms.hasFiles(element as HTMLFormElement);\n            if (hasFiles === true) {\n                const request = new XMLHttpRequest();\n                request.open(\"POST\", \"\");\n                request.addEventListener('load', () => {\n                    this.sendEvent(element, params);\n                });\n\n                request.send(new FormData(element as HTMLFormElement));\n            } else {\n                this.sendEvent(element, params);\n            }\n            return false;\n        };\n    }\n\n    protected sendEvent(element: HTMLElement, params: Params) {\n        const t = element?.getAttribute(this.attribute);\n        if (t === null) {\n            return;\n        }\n\n        var vals = { ...params };\n\n        const data: { [key: string]: any } = Forms.serialize(\n            element as HTMLFormElement\n        );\n        Object.keys(data).map((k) => {\n            vals[k] = data[k];\n        });\n        element.classList.add(`${this.attribute}-loading`);\n        Socket.sendAndTrack(\n            new LiveEvent(t, vals, LiveEvent.GetID()),\n            element\n        );\n    }\n}\n\n/**\n * live-hook event handler.\n */\nclass Hook extends LiveHandler {\n    constructor() {\n        super(\"\", \"live-hook\");\n    }\n\n    public attach() {\n        document\n            .querySelectorAll(`[${this.attribute}]`)\n            .forEach((element: Element) => {\n                if (this.isWired(element) == true) {\n                    return;\n                }\n                EventDispatch.mounted(element);\n            });\n    }\n}\n\n/**\n * live-patch event handler.\n */\nclass Patch extends LiveHandler {\n    constructor() {\n        super(\"click\", \"live-patch\");\n    }\n\n    protected handler(element: HTMLElement, _: Params): EventListener {\n        return (e: Event) => {\n            if (e.preventDefault) e.preventDefault();\n            const path = element.getAttribute(\"href\");\n            if (path === null) {\n                return;\n            }\n            UpdateURLParams(path, element);\n            return false;\n        };\n    }\n}\n\n/**\n * Handle all events.\n */\nexport class Events {\n    private static clicks: Click;\n    private static contextmenu: Contextmenu;\n    private static mousedown: Mousedown;\n    private static mouseup: Mouseup;\n    private static focus: Focus;\n    private static blur: Blur;\n    private static windowFocus: WindowFocus;\n    private static windowBlur: WindowBlur;\n    private static keydown: Keydown;\n    private static keyup: Keyup;\n    private static windowKeydown: WindowKeydown;\n    private static windowKeyup: WindowKeyup;\n    private static change: Change;\n    private static submit: Submit;\n    private static hook: Hook;\n    private static patch: Patch;\n\n    /**\n     * Initialise all the event wiring.\n     */\n    public static init() {\n        this.clicks = new Click();\n        this.contextmenu = new Contextmenu();\n        this.mousedown = new Mousedown();\n        this.mouseup = new Mouseup();\n        this.focus = new Focus();\n        this.blur = new Blur();\n        this.windowFocus = new WindowFocus();\n        this.windowBlur = new WindowBlur();\n        this.keydown = new Keydown();\n        this.keyup = new Keyup();\n        this.windowKeydown = new WindowKeydown();\n        this.windowKeyup = new WindowKeyup();\n        this.change = new Change();\n        this.submit = new Submit();\n        this.hook = new Hook();\n        this.patch = new Patch();\n\n        this.handleBrowserNav();\n    }\n\n    /**\n     * Re-attach all events when we have re-rendered.\n     */\n    public static rewire() {\n        this.clicks.attach();\n        this.contextmenu.attach();\n        this.mousedown.attach();\n        this.mouseup.attach();\n        this.focus.attach();\n        this.blur.attach();\n        this.windowFocus.attach();\n        this.windowBlur.attach();\n        this.keydown.attach();\n        this.keyup.attach();\n        this.windowKeyup.attach();\n        this.windowKeydown.attach();\n        this.change.attach();\n        this.submit.attach();\n        this.hook.attach();\n        this.patch.attach();\n    }\n\n    /**\n     * Watch the browser popstate so that we can send a params\n     * change event to the server.\n     */\n    private static handleBrowserNav() {\n        window.onpopstate = function (_: any) {\n            Socket.send(\n                new LiveEvent(\n                    \"params\",\n                    GetURLParams(document.location.search),\n                    LiveEvent.GetID()\n                )\n            );\n        };\n    }\n}\n", "import { EventDispatch, LiveEvent } from \"./event\";\nimport { Patch } from \"./patch\";\nimport { Events } from \"./events\";\nimport { UpdateURLParams } from \"./params\";\n\nconst privateSocketID = \"_psid\"\n\n/**\n * Represents the websocket connection to\n * the backend server.\n */\nexport class Socket {\n    private static id: string | undefined;\n    private static conn: WebSocket;\n    private static ready: boolean = false;\n    private static disconnectNotified: boolean = false;\n\n    private static trackedEvents: {\n        [id: number]: { ev: LiveEvent; el: HTMLElement };\n    };\n\n    constructor() {}\n\n    static getID() {\n        if (this.id) {\n            return this.id;\n        }\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${privateSocketID}=`);\n        if (parts && parts.length === 2) {\n            const val = parts.pop()\n            if (!val) {\n                return \"\"\n            }\n            return val.split(';').shift();\n        }\n        return \"\";\n    }\n\n    static setCookie() {\n        var date = new Date();\n        date.setTime(date.getTime() + (60*1000));\n        document.cookie = `${privateSocketID}=${this.id}; expires=${date.toUTCString()}; path=/`;\n    }\n\n    static dial() {\n        this.trackedEvents = {};\n        this.id = this.getID();\n        this.setCookie();\n\n        console.debug(\"Socket.dial called\", this.id);\n        this.conn = new WebSocket(\n            `${location.protocol === \"https:\" ? \"wss\" : \"ws\"}://${\n                location.host\n            }${location.pathname}${location.search}${location.hash}`\n        );\n        this.conn.addEventListener(\"close\", (ev) => {\n            this.ready = false;\n            console.warn(\n                `WebSocket Disconnected code: ${ev.code}, reason: ${ev.reason}`\n            );\n            if (ev.code !== 1001) {\n                if (this.disconnectNotified === false) {\n                    EventDispatch.disconnected();\n                    this.disconnectNotified = true;\n                }\n                setTimeout(() => {\n                    Socket.dial();\n                }, 1000);\n            }\n        });\n        // Ping on open.\n        this.conn.addEventListener(\"open\", (_) => {\n            EventDispatch.reconnected();\n            this.disconnectNotified = false;\n            this.ready = true;\n        });\n        this.conn.addEventListener(\"message\", (ev) => {\n            if (typeof ev.data !== \"string\") {\n                console.error(\"unexpected message type\", typeof ev.data);\n                return;\n            }\n            const e = LiveEvent.fromMessage(ev.data);\n            switch (e.typ) {\n                case \"patch\":\n                    Patch.handle(e);\n                    Events.rewire();\n                    break;\n                case \"params\":\n                    UpdateURLParams(`${window.location.pathname}?${e.data}`);\n                    break;\n                case \"redirect\":\n                    window.location.replace(e.data);\n                    break;\n                case \"ack\":\n                    this.ack(e);\n                    break;\n                case \"err\":\n                    EventDispatch.error();\n                // Fallthrough here.\n                default:\n                    EventDispatch.handleEvent(e);\n            }\n        });\n    }\n\n    /**\n     * Send an event and keep track of it until\n     * the ack event comes back.\n     */\n    static sendAndTrack(e: LiveEvent, element: HTMLElement) {\n        if (this.ready === false) {\n            console.warn(\"connection not ready for send of event\", e);\n            return;\n        }\n        this.trackedEvents[e.id] = {\n            ev: e,\n            el: element,\n        };\n        this.conn.send(e.serialize());\n    }\n\n    static send(e: LiveEvent) {\n        if (this.ready === false) {\n            console.warn(\"connection not ready for send of event\", e);\n            return;\n        }\n        this.conn.send(e.serialize());\n    }\n\n    /**\n     * Called when a ack event comes in. Complete the loop\n     * with any outstanding tracked events.\n     */\n    static ack(e: LiveEvent) {\n        if (!(e.id in this.trackedEvents)) {\n            return;\n        }\n        this.trackedEvents[e.id].el.dispatchEvent(new Event(\"ack\"));\n        delete this.trackedEvents[e.id];\n    }\n}\n", "import { Socket } from \"./socket\";\nimport { Events } from \"./events\";\nimport { EventDispatch, LiveEvent } from \"./event\";\nimport { Hooks, DOM } from \"./interop\";\n\nexport class Live {\n    constructor(private hooks: Hooks, private dom?: DOM) {}\n\n    public init() {\n        // Check that this document has been rendered by live.\n        if (document.querySelector(`[live-rendered]`) === null) {\n            return;\n        }\n        // Initialise the event dispatch.\n        EventDispatch.init(this.hooks, this.dom);\n\n        // Dial the server.\n        Socket.dial();\n\n        // Initialise our live bindings.\n        Events.init();\n\n        // Rewire all the events.\n        Events.rewire();\n    }\n\n    public send(typ: string, data: any, id?: number) {\n        const e = new LiveEvent(typ, data, id);\n        Socket.send(e);\n    }\n}\n", "import { Live } from \"./live\";\nimport { Hooks } from \"./interop\";\n\ndeclare global {\n    interface Window {\n        Hooks: Hooks;\n        Live: Live;\n    }\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", (_) => {\n    if (window.Live !== undefined) {\n        console.error(\"window.Live already defined\");\n    }\n    const hooks = window.Hooks || {};\n    window.Live = new Live(hooks);\n    window.Live.init();\n});\n"],
  "mappings": "mBAGO,IAAMA,EAAN,KAAkB,CACrB,OAAO,KAAKC,EAAqC,CAC7C,OAAIA,EAAQ,eAAiB,OAClB,KAEJA,EAAQ,aAAa,WAAW,CAC3C,CACJ,ECNO,IAAMC,EAAe,eACfC,EAAoB,oBACpBC,EAAe,eACfC,EAAqB,qBACrBC,EAAiB,iBACjBC,EAAoB,oBACpBC,EAAmB,mBAEnBC,EAAiB,iBACjBC,EAAoB,oBACpBC,EAAa,aAMbC,EAAN,MAAMC,CAAU,CAInB,YAAe,SAAmB,EAElC,YAAYC,EAAaC,EAAWC,EAAa,CAC7C,KAAK,IAAMF,EACX,KAAK,KAAOC,EACRC,IAAO,OACP,KAAK,GAAKA,EAEV,KAAK,GAAK,CAElB,CAKA,OAAc,OAAgB,CAC1B,OAAO,KAAK,UAChB,CAKO,WAAoB,CACvB,OAAO,KAAK,UAAU,CAClB,EAAG,KAAK,IACR,EAAG,KAAK,GACR,EAAG,KAAK,IACZ,CAAC,CACL,CAKA,OAAc,YAAYD,EAAsB,CAC5C,IAAM,EAAI,KAAK,MAAMA,CAAI,EACzB,OAAO,IAAIF,EAAU,EAAE,EAAG,EAAE,EAAG,EAAE,CAAC,CACtC,CACJ,EAOaI,EAAN,KAAoB,CAKvB,aAAc,CAAC,CAKf,OAAO,KAAKC,EAAcC,EAAW,CACjC,KAAK,MAAQD,EACb,KAAK,IAAMC,EACX,KAAK,cAAgB,CAAC,CAC1B,CAKA,OAAO,YAAYC,EAAe,CACxBA,EAAG,OAAO,KAAK,eAGrB,KAAK,cAAcA,EAAG,GAAG,EAAE,IAAKC,GAAM,CAClCA,EAAED,EAAG,IAAI,CACb,CAAC,CACL,CAKA,OAAO,QAAQE,EAAkB,CAC7B,IAAMC,EAAQ,IAAI,YAAYrB,EAAc,CAAC,CAAC,EACxCmB,EAAI,KAAK,gBAAgBC,CAAO,EAClCD,IAAM,MAGV,KAAK,SAASE,EAAOD,EAASD,EAAE,OAAO,CAC3C,CAKA,OAAO,aAAaG,EAAiBC,EAAe,CAChD,IAAMF,EAAQ,IAAI,YAAYpB,EAAmB,CAAC,CAAC,EAE7CkB,EAAI,KAAK,gBAAgBG,CAAM,EACjCH,IAAM,MACN,KAAK,SAASE,EAAOC,EAAQH,EAAE,YAAY,EAI3C,KAAK,MAAQ,QACb,KAAK,IAAI,oBAAsB,QAE/B,KAAK,IAAI,kBAAkBG,EAAQC,CAAI,CAE/C,CAKA,OAAO,QAAQH,EAAkB,CAC7B,IAAMC,EAAQ,IAAI,YAAYnB,EAAc,CAAC,CAAC,EACxCiB,EAAI,KAAK,gBAAgBC,CAAO,EAClCD,IAAM,MAGV,KAAK,SAASE,EAAOD,EAASD,EAAE,OAAO,CAC3C,CAKA,OAAO,cAAcC,EAAkB,CACnC,IAAMC,EAAQ,IAAI,YAAYlB,EAAoB,CAAC,CAAC,EAC9CgB,EAAI,KAAK,gBAAgBC,CAAO,EAClCD,IAAM,MAGV,KAAK,SAASE,EAAOD,EAASD,EAAE,aAAa,CACjD,CAKA,OAAO,UAAUC,EAAkB,CAC/B,IAAMC,EAAQ,IAAI,YAAYjB,EAAgB,CAAC,CAAC,EAC1Ce,EAAI,KAAK,gBAAgBC,CAAO,EAClCD,IAAM,MAGV,KAAK,SAASE,EAAOD,EAASD,EAAE,SAAS,CAC7C,CAKA,OAAO,cAAe,CAClB,IAAME,EAAQ,IAAI,YAAYhB,EAAmB,CAAC,CAAC,EACnD,SAAS,iBAAiB,aAAa,EAAE,QAASe,GAAqB,CACnE,IAAMD,EAAI,KAAK,gBAAgBC,CAAO,EAClCD,IAAM,MAGV,KAAK,SAASE,EAAOD,EAASD,EAAE,YAAY,CAChD,CAAC,EACD,SAAS,KAAK,UAAU,IAAIX,CAAiB,EAC7C,SAAS,KAAK,UAAU,OAAOD,CAAc,CACjD,CAKA,OAAO,aAAc,CACjB,IAAMc,EAAQ,IAAI,YAAYf,EAAkB,CAAC,CAAC,EAClD,SAAS,iBAAiB,aAAa,EAAE,QAASc,GAAqB,CACnE,IAAMD,EAAI,KAAK,gBAAgBC,CAAO,EAClCD,IAAM,MAGV,KAAK,SAASE,EAAOD,EAASD,EAAE,WAAW,CAC/C,CAAC,EACD,SAAS,KAAK,UAAU,OAAOX,CAAiB,EAChD,SAAS,KAAK,UAAU,IAAID,CAAc,CAC9C,CAKA,OAAO,OAAQ,CACX,SAAS,KAAK,UAAU,IAAIE,CAAU,CAC1C,CAEA,OAAe,gBAAgBW,EAA+B,CAC1D,IAAMI,EAAMC,EAAY,KAAKL,CAAsB,EACnD,OAAII,IAAQ,KACDA,EAEJ,KAAK,MAAMA,CAAG,CACzB,CAEA,OAAe,SACXH,EACAK,EACAC,EACF,CACE,GAAIA,IAAM,OACN,OAEJ,IAAMC,EAAaC,GAAiB,CAChCC,EAAO,KAAKD,CAAC,CACjB,EACME,EAAc,CAACF,EAAWG,IAAyB,CAC/CH,KAAK,KAAK,gBACZ,KAAK,cAAcA,CAAC,EAAI,CAAC,GAE7B,KAAK,cAAcA,CAAC,EAAE,KAAKG,CAAE,CACjC,EACAL,EAAE,KAAK,CAAE,GAAAD,EAAI,UAAAE,EAAW,YAAAG,CAAY,CAAC,EAAE,EACvCL,EAAG,cAAcL,CAAK,CAC1B,CACJ,EChNO,IAAMY,EAAN,KAAY,CACf,YAAe,MAAQ,UAEvB,YAAe,UAA4C,CAAC,EAO5D,OAAO,WAAY,CACD,SAAS,iBAAiB,MAAM,EACxC,QAASC,GAAM,CACjB,GAAIA,EAAE,KAAO,GAAI,CACb,QAAQ,MACJ,wDACAA,CACJ,EACA,MACJ,CAEA,KAAK,UAAUA,EAAE,EAAE,EAAI,CAAC,EACxB,IAAI,SAASA,CAAC,EAAE,QAAQ,CAACC,EAAYC,IAAiB,CAClD,IAAMC,EAAI,CACN,KAAMD,EACN,MAAOD,EACP,MACID,EAAE,cAAc,UAAUE,CAAI,IAAI,GAClC,SAAS,aACjB,EACA,KAAK,UAAUF,EAAE,EAAE,EAAE,KAAKG,CAAC,CAC/B,CAAC,CACL,CAAC,CACL,CAKA,OAAO,SAAU,CACb,OAAO,KAAK,KAAK,SAAS,EAAE,IAAKC,GAAW,CACxC,IAAMC,EAAO,SAAS,cAAc,IAAID,CAAM,EAAE,EAChD,GAAIC,IAAS,KAAM,CACf,OAAO,KAAK,UAAUD,CAAM,EAC5B,MACJ,CAEc,KAAK,UAAUA,CAAM,EAC7B,IAAKD,GAAM,CACb,IAAMG,EAAQD,EAAK,cACf,UAAUF,EAAE,IAAI,IACpB,EACA,GAAIG,IAAU,KAGd,OAAQA,EAAM,KAAM,CAChB,IAAK,OACD,MACJ,IAAK,WACGH,EAAE,QAAU,OACZG,EAAM,QAAU,IAEpB,MACJ,QACIA,EAAM,MAAQH,EAAE,MACZA,EAAE,QAAU,IACZG,EAAM,MAAM,EAEhB,KACR,CACJ,CAAC,CACL,CAAC,CACL,CAKA,OAAO,UAAUD,EAAuE,CACpF,IAAME,EAAiC,CAAC,EAExC,OADiB,IAAI,SAASF,CAAI,EACzB,QAAQ,CAACJ,EAAOO,IAAQ,CAC7B,OAAQ,GAAM,CACV,KAAKP,aAAiB,KAClB,IAAMQ,EAAOR,EACPS,EAAK,CACP,KAAMD,EAAK,KACX,KAAMA,EAAK,KACX,KAAMA,EAAK,KACX,aAAcA,EAAK,YACvB,EACK,QAAQ,IAAIF,EAAQ,KAAK,KAAK,IAC/BA,EAAO,KAAK,KAAK,EAAI,CAAC,GAErB,QAAQ,IAAIA,EAAO,KAAK,KAAK,EAAGC,CAAG,IACpCD,EAAO,KAAK,KAAK,EAAEC,CAAG,EAAI,CAAC,GAE/BD,EAAO,KAAK,KAAK,EAAEC,CAAG,EAAE,KAAKE,CAAE,EAC/B,MACJ,QAEI,GAAI,CAAC,QAAQ,IAAIH,EAAQC,CAAG,EAAG,CAC3BD,EAAOC,CAAG,EAAIP,EACd,MACJ,CAGK,MAAM,QAAQM,EAAOC,CAAG,CAAC,IAC1BD,EAAOC,CAAG,EAAI,CAACD,EAAOC,CAAG,CAAC,GAG9BD,EAAOC,CAAG,EAAE,KAAKP,CAAK,CAC9B,CACJ,CAAC,EACMM,CACX,CAKA,OAAO,SAASF,EAAgC,CAC5C,IAAMM,EAAW,IAAI,SAASN,CAAI,EAC9BO,EAAW,GACf,OAAAD,EAAS,QAASV,GAAU,CACrBA,aAAiB,OAChBW,EAAW,GAEnB,CAAC,EACMA,CACX,CACJ,EC1IO,IAAMC,EAAN,MAAMC,CAAM,CACf,OAAO,OAAOC,EAAkB,CAC5BC,EAAM,UAAU,EAEAD,EAAM,KACd,IAAID,EAAM,UAAU,EAE5BE,EAAM,QAAQ,CAClB,CAEA,OAAe,WAAWC,EAAe,CACrC,IAAMC,EAAS,SAAS,cAAc,KAAKD,EAAE,MAAM,GAAG,EACtD,GAAIC,IAAW,KACX,OAGJ,IAAMC,EAAaL,EAAM,UAAUG,EAAE,IAAI,EACzC,OAAQA,EAAE,OAAQ,CACd,IAAK,GACD,OACJ,IAAK,GACGA,EAAE,OAAS,GACXG,EAAc,cAAcF,CAAM,EAElCE,EAAc,aAAaF,EAAQC,CAAqB,EAE5DD,EAAO,UAAYD,EAAE,KACjBA,EAAE,OAAS,GACXG,EAAc,UAAUF,CAAM,EAE9BE,EAAc,QAAQF,CAAM,EAEhC,MACJ,IAAK,GACDE,EAAc,aAAaF,EAAQC,CAAqB,EACxDD,EAAO,OAAOC,CAAU,EACxBC,EAAc,QAAQF,CAAM,EAC5B,MACJ,IAAK,GACDE,EAAc,aAAaF,EAAQC,CAAqB,EACxDD,EAAO,QAAQC,CAAU,EACzBC,EAAc,QAAQF,CAAM,EAC5B,KACR,CACJ,CAEA,OAAe,UAAUG,EAAoB,CACzC,IAAMC,EAAW,SAAS,cAAc,UAAU,EAGlD,OAFAD,EAAOA,EAAK,KAAK,EACjBC,EAAS,UAAYD,EACjBC,EAAS,QAAQ,aAAe,KACzB,SAAS,eAAeD,CAAI,EAEhCC,EAAS,QAAQ,UAC5B,CACJ,ECpDO,SAASC,EAAUC,EAA+B,CACrD,IAAMC,EAAiB,CAAC,EAWxB,GATkB,IAAI,gBAAgB,OAAO,SAAS,MAAM,EAClD,QAAQ,CAACC,EAAOC,IAAQ,CAC9BF,EAAOE,CAAG,EAAID,CAClB,CAAC,EAEGF,IAAY,QAIZ,CAACA,EAAQ,cAAc,EACvB,OAAOC,EAEX,IAAMG,EAAQJ,EAAQ,WACtB,QAASK,EAAI,EAAGA,EAAID,EAAM,OAAQC,IACzBD,EAAMC,CAAC,EAAE,KAAK,WAAW,aAAa,IAG3CJ,EAAOG,EAAMC,CAAC,EAAE,KAAK,MAAM,aAAa,EAAE,CAAC,CAAC,EAAID,EAAMC,CAAC,EAAE,OAE7D,OAAOJ,CACX,CAKO,SAASK,EAAaC,EAAsB,CAC/C,IAAMC,EAAM,IAAI,IAAID,EAAM,SAAS,MAAM,EACnCE,EAAY,IAAI,gBAAgBD,EAAI,MAAM,EAE1CP,EAAiB,CAAC,EACxB,OAAAQ,EAAU,QAAQ,CAACP,EAAOC,IAAQ,CAC9BF,EAAOE,CAAG,EAAID,CAClB,CAAC,EAEMD,CACX,CAMO,SAASS,EAAgBH,EAAcP,EAAuB,CAEjE,GADA,OAAO,QAAQ,UAAU,CAAC,EAAG,GAAIO,CAAI,EACjCP,IAAY,OACZW,EAAO,KAAK,IAAIC,EAAU,SAAU,CAAE,GAAGN,EAAaC,CAAI,CAAE,CAAC,CAAC,MAC3D,CACH,IAAMM,EAASd,EAAUC,CAAO,EAChCW,EAAO,aACH,IAAIC,EACA,SACA,CAAE,GAAGC,EAAQ,GAAGP,EAAaC,CAAI,CAAE,EACnCK,EAAU,MAAM,CACpB,EACAZ,CACJ,CACJ,CACJ,CClEA,IAAMc,EAAN,KAAkB,CAGd,YAAsBC,EAAyBC,EAAmB,CAA5C,WAAAD,EAAyB,eAAAC,EAF/C,KAAU,QAAU,IAAIC,CAE2C,CAE5D,QAAQC,EAA2B,CACtC,OAAIA,EAAQ,aAAa,GAAG,KAAK,SAAS,QAAQ,EACvC,IAEXA,EAAQ,aAAa,GAAG,KAAK,SAAS,SAAU,EAAE,EAC3C,GACX,CAEO,QAAS,CACZ,SACK,iBAAiB,KAAK,KAAK,SAAS,GAAG,EACvC,QAASA,GAAqB,CAC3B,GAAI,KAAK,QAAQA,CAAO,GAAK,GACzB,OAEJ,IAAMC,EAASC,EAAUF,CAAsB,EAC/CA,EAAQ,iBAAiB,KAAK,MAAQG,GAAM,CACpC,KAAK,QAAQ,YAAYH,CAAO,EAChC,KAAK,QAAQ,SACTA,EACAG,EACA,KAAK,QAAQH,EAA4BC,CAAM,CACnD,EAEA,KAAK,QAAQD,EAA4BC,CAAM,EAAEE,CAAC,CAE1D,CAAC,EACDH,EAAQ,iBAAiB,MAAQI,GAAM,CACnCJ,EAAQ,UAAU,OAAO,GAAG,KAAK,SAAS,UAAU,CACxD,CAAC,CACL,CAAC,CACT,CAEU,cAAe,CACrB,SACK,iBAAiB,KAAK,KAAK,SAAS,GAAG,EACvC,QAASA,GAAqB,CAC3B,GAAI,KAAK,QAAQA,CAAO,IAAM,GAC1B,OAEJ,IAAMC,EAASC,EAAUF,CAAsB,EAC/C,OAAO,iBACH,KAAK,MACL,KAAK,QAAQA,EAAwBC,CAAM,CAC/C,EACA,OAAO,iBAAiB,MAAQG,GAAM,CAClCJ,EAAQ,UAAU,OAAO,GAAG,KAAK,SAAS,UAAU,CACxD,CAAC,CACL,CAAC,CACT,CAEU,QAAQA,EAAsBC,EAA+B,CACnE,OAAQG,GAAa,CACjB,IAAMC,EAAIL,GAAS,aAAa,KAAK,SAAS,EAC1CK,IAAM,OAGVL,EAAQ,UAAU,IAAI,GAAG,KAAK,SAAS,UAAU,EACjDM,EAAO,aACH,IAAIC,EAAUF,EAAGJ,EAAQM,EAAU,MAAM,CAAC,EAC1CP,CACJ,EACJ,CACJ,CACJ,EAKaQ,EAAN,cAAyBZ,CAAY,CAC9B,QAAQI,EAAsBC,EAA+B,CACnE,OAAQQ,GAAc,CAClB,IAAMC,EAAKD,EACLJ,EAAIL,GAAS,aAAa,KAAK,SAAS,EAC9C,GAAIK,IAAM,KACN,OAEJ,IAAMM,EAASX,EAAQ,aAAa,UAAU,EAC9C,GAAIW,IAAW,MACPD,EAAG,MAAQC,EACX,OAGRX,EAAQ,UAAU,IAAI,GAAG,KAAK,SAAS,UAAU,EACjD,IAAMY,EAAU,CACZ,IAAKF,EAAG,IACR,OAAQA,EAAG,OACX,QAASA,EAAG,QACZ,SAAUA,EAAG,SACb,QAASA,EAAG,OAChB,EACAJ,EAAO,aACH,IAAIC,EAAUF,EAAG,CAAE,GAAGJ,EAAQ,GAAGW,CAAQ,EAAGL,EAAU,MAAM,CAAC,EAC7DP,CACJ,CACJ,CACJ,CACJ,EAEMD,EAAN,KAAc,CAAd,cACI,KAAQ,aAAe,gBAGhB,YAAYC,EAA2B,CAC1C,OAAOA,EAAQ,aAAa,KAAK,YAAY,CACjD,CAEO,SAASA,EAAkB,EAAUa,EAAmB,CAE3D,GADA,aAAa,KAAK,aAAa,EAC3B,CAAC,KAAK,YAAYb,CAAO,EAAG,CAC5Ba,EAAG,CAAC,EACJ,MACJ,CACA,IAAMC,EAAWd,EAAQ,aAAa,KAAK,YAAY,EACvD,GAAIc,IAAa,KAAM,CACnBD,EAAG,CAAC,EACJ,MACJ,CACA,GAAIC,IAAa,OAAQ,CACrB,KAAK,cAAgBD,EACrBb,EAAQ,iBAAiB,OAAQ,IAAM,CACnC,KAAK,cAAc,CACvB,CAAC,EACD,MACJ,CACA,KAAK,cAAgB,WAAW,IAAM,CAClCa,EAAG,CAAC,CACR,EAAG,SAASC,CAAQ,CAAC,CACzB,CACJ,EAKMC,EAAN,cAAoBnB,CAAY,CAC5B,aAAc,CACV,MAAM,QAAS,YAAY,CAC/B,CACJ,EAKMoB,EAAN,cAA0BpB,CAAY,CAClC,aAAc,CACV,MAAM,cAAe,kBAAkB,CAC3C,CACJ,EAKMqB,EAAN,cAAwBrB,CAAY,CAChC,aAAc,CACV,MAAM,YAAa,gBAAgB,CACvC,CACJ,EAKMsB,EAAN,cAAsBtB,CAAY,CAC9B,aAAc,CACV,MAAM,UAAW,cAAc,CACnC,CACJ,EAKMuB,EAAN,cAAoBvB,CAAY,CAC5B,aAAc,CACV,MAAM,QAAS,YAAY,CAC/B,CACJ,EAKMwB,EAAN,cAAmBxB,CAAY,CAC3B,aAAc,CACV,MAAM,OAAQ,WAAW,CAC7B,CACJ,EAKMyB,EAAN,cAA0BzB,CAAY,CAClC,aAAc,CACV,MAAM,QAAS,mBAAmB,CACtC,CAEO,QAAS,CACZ,KAAK,aAAa,CACtB,CACJ,EAKM0B,EAAN,cAAyB1B,CAAY,CACjC,aAAc,CACV,MAAM,OAAQ,kBAAkB,CACpC,CAEO,QAAS,CACZ,KAAK,aAAa,CACtB,CACJ,EAKM2B,EAAN,cAAsBf,CAAW,CAC7B,aAAc,CACV,MAAM,UAAW,cAAc,CACnC,CACJ,EAKMgB,EAAN,cAAoBhB,CAAW,CAC3B,aAAc,CACV,MAAM,QAAS,YAAY,CAC/B,CACJ,EAKMiB,EAAN,cAA4BjB,CAAW,CACnC,aAAc,CACV,MAAM,UAAW,qBAAqB,CAC1C,CAEO,QAAS,CACZ,KAAK,aAAa,CACtB,CACJ,EAKMkB,EAAN,cAA0BlB,CAAW,CACjC,aAAc,CACV,MAAM,QAAS,mBAAmB,CACtC,CAEO,QAAS,CACZ,KAAK,aAAa,CACtB,CACJ,EAKMmB,EAAN,KAAa,CAIT,aAAc,CAHd,KAAU,UAAY,cACtB,KAAU,QAAU,IAAI5B,CAET,CAER,QAAQC,EAA2B,CACtC,OAAIA,EAAQ,aAAa,GAAG,KAAK,SAAS,QAAQ,EACvC,IAEXA,EAAQ,aAAa,GAAG,KAAK,SAAS,SAAU,EAAE,EAC3C,GACX,CAEO,QAAS,CACZ,IAAI4B,EAAmB,CAAC,EACxB,SACK,iBAAiB,QAAQ,KAAK,SAAS,GAAG,EAC1C,QAAS5B,GAAqB,CAC3BA,EAAQ,iBAAiB,MAAQI,GAAM,CACnCJ,EAAQ,UAAU,OAAO,GAAG,KAAK,SAAS,UAAU,CACxD,CAAC,EACD4B,EAAM,KAAK5B,CAAO,EAClBA,EACK,iBAAiB,uBAAuB,EACxC,QAAS6B,GAA0B,CAChC,KAAK,SAAS7B,EAAS6B,CAAY,CACvC,CAAC,CACT,CAAC,EACLD,EAAM,QAAS5B,GAAqB,CAChC,SACK,iBAAiB,SAASA,EAAQ,aAAa,IAAI,CAAC,GAAG,EACvD,QAAS6B,GAAiB,CACvB,KAAK,SAAS7B,EAAS6B,CAAY,CACvC,CAAC,CACT,CAAC,CACL,CAEQ,SAAS7B,EAAkB6B,EAAuB,CAClD,KAAK,QAAQA,CAAY,GAG7BA,EAAa,iBAAiB,QAAU1B,GAAM,CACtC,KAAK,QAAQ,YAAY0B,CAAY,EACrC,KAAK,QAAQ,SAASA,EAAc1B,EAAG,IAAM,CACzC,KAAK,QAAQH,CAA0B,CAC3C,CAAC,EAED,KAAK,QAAQA,CAA0B,CAE/C,CAAC,CACL,CAEQ,QAAQA,EAA0B,CACtC,IAAMK,EAAIL,GAAS,aAAa,KAAK,SAAS,EAC9C,GAAIK,IAAM,KACN,OAEJ,IAAMyB,EAAiCC,EAAM,UAAU/B,CAAO,EAC9DA,EAAQ,UAAU,IAAI,GAAG,KAAK,SAAS,UAAU,EACjDM,EAAO,aACH,IAAIC,EAAUF,EAAGyB,EAAQvB,EAAU,MAAM,CAAC,EAC1CP,CACJ,CACJ,CACJ,EAKMgC,EAAN,cAAqBpC,CAAY,CAC7B,aAAc,CACV,MAAM,SAAU,aAAa,CACjC,CAEU,QAAQI,EAAsBC,EAA+B,CACnE,OAAQE,GAAa,CAIjB,GAHIA,EAAE,gBAAgBA,EAAE,eAAe,EAEtB4B,EAAM,SAAS/B,CAA0B,IACzC,GAAM,CACnB,IAAMiC,EAAU,IAAI,eACpBA,EAAQ,KAAK,OAAQ,EAAE,EACvBA,EAAQ,iBAAiB,OAAQ,IAAM,CACnC,KAAK,UAAUjC,EAASC,CAAM,CAClC,CAAC,EAEDgC,EAAQ,KAAK,IAAI,SAASjC,CAA0B,CAAC,CACzD,MACI,KAAK,UAAUA,EAASC,CAAM,EAElC,MAAO,EACX,CACJ,CAEU,UAAUD,EAAsBC,EAAgB,CACtD,IAAMI,EAAIL,GAAS,aAAa,KAAK,SAAS,EAC9C,GAAIK,IAAM,KACN,OAGJ,IAAI6B,EAAO,CAAE,GAAGjC,CAAO,EAEvB,IAAMkC,EAA+BJ,EAAM,UACvC/B,CACJ,EACA,OAAO,KAAKmC,CAAI,EAAE,IAAKC,GAAM,CACzBF,EAAKE,CAAC,EAAID,EAAKC,CAAC,CACpB,CAAC,EACDpC,EAAQ,UAAU,IAAI,GAAG,KAAK,SAAS,UAAU,EACjDM,EAAO,aACH,IAAIC,EAAUF,EAAG6B,EAAM3B,EAAU,MAAM,CAAC,EACxCP,CACJ,CACJ,CACJ,EAKMqC,EAAN,cAAmBzC,CAAY,CAC3B,aAAc,CACV,MAAM,GAAI,WAAW,CACzB,CAEO,QAAS,CACZ,SACK,iBAAiB,IAAI,KAAK,SAAS,GAAG,EACtC,QAASI,GAAqB,CACvB,KAAK,QAAQA,CAAO,GAAK,IAG7BsC,EAAc,QAAQtC,CAAO,CACjC,CAAC,CACT,CACJ,EAKMuC,EAAN,cAAoB3C,CAAY,CAC5B,aAAc,CACV,MAAM,QAAS,YAAY,CAC/B,CAEU,QAAQI,EAAsBI,EAA0B,CAC9D,OAAQD,GAAa,CACbA,EAAE,gBAAgBA,EAAE,eAAe,EACvC,IAAMqC,EAAOxC,EAAQ,aAAa,MAAM,EACxC,GAAIwC,IAAS,KAGb,OAAAC,EAAgBD,EAAMxC,CAAO,EACtB,EACX,CACJ,CACJ,EAKa0C,EAAN,KAAa,CAqBhB,OAAc,MAAO,CACjB,KAAK,OAAS,IAAI3B,EAClB,KAAK,YAAc,IAAIC,EACvB,KAAK,UAAY,IAAIC,EACrB,KAAK,QAAU,IAAIC,EACnB,KAAK,MAAQ,IAAIC,EACjB,KAAK,KAAO,IAAIC,EAChB,KAAK,YAAc,IAAIC,EACvB,KAAK,WAAa,IAAIC,EACtB,KAAK,QAAU,IAAIC,EACnB,KAAK,MAAQ,IAAIC,EACjB,KAAK,cAAgB,IAAIC,EACzB,KAAK,YAAc,IAAIC,EACvB,KAAK,OAAS,IAAIC,EAClB,KAAK,OAAS,IAAIK,EAClB,KAAK,KAAO,IAAIK,EAChB,KAAK,MAAQ,IAAIE,EAEjB,KAAK,iBAAiB,CAC1B,CAKA,OAAc,QAAS,CACnB,KAAK,OAAO,OAAO,EACnB,KAAK,YAAY,OAAO,EACxB,KAAK,UAAU,OAAO,EACtB,KAAK,QAAQ,OAAO,EACpB,KAAK,MAAM,OAAO,EAClB,KAAK,KAAK,OAAO,EACjB,KAAK,YAAY,OAAO,EACxB,KAAK,WAAW,OAAO,EACvB,KAAK,QAAQ,OAAO,EACpB,KAAK,MAAM,OAAO,EAClB,KAAK,YAAY,OAAO,EACxB,KAAK,cAAc,OAAO,EAC1B,KAAK,OAAO,OAAO,EACnB,KAAK,OAAO,OAAO,EACnB,KAAK,KAAK,OAAO,EACjB,KAAK,MAAM,OAAO,CACtB,CAMA,OAAe,kBAAmB,CAC9B,OAAO,WAAa,SAAUnC,EAAQ,CAClCE,EAAO,KACH,IAAIC,EACA,SACAoC,EAAa,SAAS,SAAS,MAAM,EACrCpC,EAAU,MAAM,CACpB,CACJ,CACJ,CACJ,CACJ,EC1fA,IAAMqC,EAAkB,QAMXC,EAAN,MAAMC,CAAO,CAGhB,YAAe,MAAiB,GAChC,YAAe,mBAA8B,GAM7C,aAAc,CAAC,CAEf,OAAO,OAAQ,CACX,GAAI,KAAK,GACL,OAAO,KAAK,GAGhB,IAAMC,EADQ,KAAK,SAAS,MAAM,GACd,MAAM,KAAKH,CAAe,GAAG,EACjD,GAAIG,GAASA,EAAM,SAAW,EAAG,CAC7B,IAAMC,EAAMD,EAAM,IAAI,EACtB,OAAKC,EAGEA,EAAI,MAAM,GAAG,EAAE,MAAM,EAFjB,EAGf,CACA,MAAO,EACX,CAEA,OAAO,WAAY,CACf,IAAIC,EAAO,IAAI,KACfA,EAAK,QAAQA,EAAK,QAAQ,EAAK,GAAG,GAAK,EACvC,SAAS,OAAS,GAAGL,CAAe,IAAI,KAAK,EAAE,aAAaK,EAAK,YAAY,CAAC,UAClF,CAEA,OAAO,MAAO,CACV,KAAK,cAAgB,CAAC,EACtB,KAAK,GAAK,KAAK,MAAM,EACrB,KAAK,UAAU,EAEf,QAAQ,MAAM,qBAAsB,KAAK,EAAE,EAC3C,KAAK,KAAO,IAAI,UACZ,GAAG,SAAS,WAAa,SAAW,MAAQ,IAAI,MAC5C,SAAS,IACb,GAAG,SAAS,QAAQ,GAAG,SAAS,MAAM,GAAG,SAAS,IAAI,EAC1D,EACA,KAAK,KAAK,iBAAiB,QAAUC,GAAO,CACxC,KAAK,MAAQ,GACb,QAAQ,KACJ,gCAAgCA,EAAG,IAAI,aAAaA,EAAG,MAAM,EACjE,EACIA,EAAG,OAAS,OACR,KAAK,qBAAuB,KAC5BC,EAAc,aAAa,EAC3B,KAAK,mBAAqB,IAE9B,WAAW,IAAM,CACbL,EAAO,KAAK,CAChB,EAAG,GAAI,EAEf,CAAC,EAED,KAAK,KAAK,iBAAiB,OAASM,GAAM,CACtCD,EAAc,YAAY,EAC1B,KAAK,mBAAqB,GAC1B,KAAK,MAAQ,EACjB,CAAC,EACD,KAAK,KAAK,iBAAiB,UAAYD,GAAO,CAC1C,GAAI,OAAOA,EAAG,MAAS,SAAU,CAC7B,QAAQ,MAAM,0BAA2B,OAAOA,EAAG,IAAI,EACvD,MACJ,CACA,IAAM,EAAIG,EAAU,YAAYH,EAAG,IAAI,EACvC,OAAQ,EAAE,IAAK,CACX,IAAK,QACDI,EAAM,OAAO,CAAC,EACdC,EAAO,OAAO,EACd,MACJ,IAAK,SACDC,EAAgB,GAAG,OAAO,SAAS,QAAQ,IAAI,EAAE,IAAI,EAAE,EACvD,MACJ,IAAK,WACD,OAAO,SAAS,QAAQ,EAAE,IAAI,EAC9B,MACJ,IAAK,MACD,KAAK,IAAI,CAAC,EACV,MACJ,IAAK,MACDL,EAAc,MAAM,EAExB,QACIA,EAAc,YAAY,CAAC,CACnC,CACJ,CAAC,CACL,CAMA,OAAO,aAAaM,EAAcC,EAAsB,CACpD,GAAI,KAAK,QAAU,GAAO,CACtB,QAAQ,KAAK,yCAA0CD,CAAC,EACxD,MACJ,CACA,KAAK,cAAcA,EAAE,EAAE,EAAI,CACvB,GAAIA,EACJ,GAAIC,CACR,EACA,KAAK,KAAK,KAAKD,EAAE,UAAU,CAAC,CAChC,CAEA,OAAO,KAAKA,EAAc,CACtB,GAAI,KAAK,QAAU,GAAO,CACtB,QAAQ,KAAK,yCAA0CA,CAAC,EACxD,MACJ,CACA,KAAK,KAAK,KAAKA,EAAE,UAAU,CAAC,CAChC,CAMA,OAAO,IAAIA,EAAc,CACfA,EAAE,MAAM,KAAK,gBAGnB,KAAK,cAAcA,EAAE,EAAE,EAAE,GAAG,cAAc,IAAI,MAAM,KAAK,CAAC,EAC1D,OAAO,KAAK,cAAcA,EAAE,EAAE,EAClC,CACJ,ECxIO,IAAME,EAAN,KAAW,CACd,YAAoBC,EAAsBC,EAAW,CAAjC,WAAAD,EAAsB,SAAAC,CAAY,CAE/C,MAAO,CAEN,SAAS,cAAc,iBAAiB,IAAM,OAIlDC,EAAc,KAAK,KAAK,MAAO,KAAK,GAAG,EAGvCC,EAAO,KAAK,EAGZC,EAAO,KAAK,EAGZA,EAAO,OAAO,EAClB,CAEO,KAAKC,EAAaC,EAAWC,EAAa,CAC7C,IAAMC,EAAI,IAAIC,EAAUJ,EAAKC,EAAMC,CAAE,EACrCJ,EAAO,KAAKK,CAAC,CACjB,CACJ,ECpBA,SAAS,iBAAiB,mBAAqBE,GAAM,CAC7C,OAAO,OAAS,QAChB,QAAQ,MAAM,6BAA6B,EAE/C,IAAMC,EAAQ,OAAO,OAAS,CAAC,EAC/B,OAAO,KAAO,IAAIC,EAAKD,CAAK,EAC5B,OAAO,KAAK,KAAK,CACrB,CAAC",
  "names": ["LiveElement", "element", "EventMounted", "EventBeforeUpdate", "EventUpdated", "EventBeforeDestroy", "EventDestroyed", "EventDisconnected", "EventReconnected", "ClassConnected", "ClassDisconnected", "ClassError", "LiveEvent", "_LiveEvent", "typ", "data", "id", "EventDispatch", "hooks", "dom", "ev", "h", "element", "event", "fromEl", "toEl", "val", "LiveElement", "el", "f", "pushEvent", "e", "Socket", "handleEvent", "cb", "Forms", "f", "value", "name", "i", "formID", "form", "input", "values", "key", "file", "fi", "formData", "hasFiles", "Patch", "_Patch", "event", "Forms", "e", "target", "newElement", "EventDispatch", "html", "template", "GetParams", "element", "output", "value", "key", "attrs", "i", "GetURLParams", "path", "url", "urlParams", "UpdateURLParams", "Socket", "LiveEvent", "params", "LiveHandler", "event", "attribute", "Limiter", "element", "params", "GetParams", "e", "_", "t", "Socket", "LiveEvent", "KeyHandler", "ev", "ke", "filter", "keyData", "fn", "debounce", "Click", "Contextmenu", "Mousedown", "Mouseup", "Focus", "Blur", "WindowFocus", "WindowBlur", "Keydown", "Keyup", "WindowKeydown", "WindowKeyup", "Change", "forms", "childElement", "values", "Forms", "Submit", "request", "vals", "data", "k", "Hook", "EventDispatch", "Patch", "path", "UpdateURLParams", "Events", "GetURLParams", "privateSocketID", "Socket", "_Socket", "parts", "val", "date", "ev", "EventDispatch", "_", "LiveEvent", "Patch", "Events", "UpdateURLParams", "e", "element", "Live", "hooks", "dom", "EventDispatch", "Socket", "Events", "typ", "data", "id", "e", "LiveEvent", "_", "hooks", "Live"]
}
